package com.example.foodapp.data.datastore

import android.util.Log
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.floatPreferencesKey
import androidx.datastore.preferences.core.stringPreferencesKey

import com.example.foodapp.data.model.CartItem
import com.example.foodapp.data.model.CheckoutDetails
import com.google.gson.Gson
import com.google.gson.JsonSyntaxException
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.map
import kotlinx.serialization.json.Json
import java.io.IOException
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class CartRepository @Inject constructor(
    private val dataStore: DataStore<Preferences>
) {
    private object Keys {
        val CART_ITEMS = stringPreferencesKey("cart_items")
    }

    private object PreferencesKeys {
        val KEY_SUBTOTAL = floatPreferencesKey("key_subtotal")
        val KEY_TAX = floatPreferencesKey("key_tax")
        val KEY_DELIVERY_FEE = floatPreferencesKey("key_delivery_fee")
        val KEY_TOTAL_AMOUNT = floatPreferencesKey("key_total_amount")
    }

    // L·∫•y danh s√°ch CartItem t·ª´ DataStore d∆∞·ªõi d·∫°ng Flow
    fun getCartItems(): Flow<List<CartItem>> {
        return dataStore.data.map { preferences ->
            val json = preferences[Keys.CART_ITEMS] ?: "[]"
            Gson().fromJson(json, object : TypeToken<List<CartItem>>() {}.type) ?: emptyList()
        }
    }

    // L∆∞u danh s√°ch CartItem v√†o DataStore + C·∫≠p nh·∫≠t l·∫°i Checkout
    suspend fun saveCartItems(cartItems: List<CartItem>) {
        try {
            val json = Json.encodeToString(cartItems)
            dataStore.edit { preferences ->
                preferences[Keys.CART_ITEMS] = json
            }
            updateCheckoutDetails(cartItems) // üî• ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t checkout sau khi l∆∞u gi·ªè h√†ng
        } catch (e: Exception) {
            Log.e("CartRepository", "L·ªói khi l∆∞u gi·ªè h√†ng: ${e.message}")
            throw Exception("Kh√¥ng th·ªÉ l∆∞u gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.")
        }
    }

    // üî• Th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng
    suspend fun addToCart(cartItem: CartItem) {
        getCartItems().firstOrNull()?.let { currentItems ->
            val updatedItems = currentItems.toMutableList()
            val existingIndex = updatedItems.indexOfFirst { it.id == cartItem.id }

            if (existingIndex != -1) {
                // N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                val existingItem = updatedItems[existingIndex]
                updatedItems[existingIndex] = existingItem.copy(quantity = cartItem.quantity)
            } else {
                // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
                updatedItems.add(cartItem)
            }
            saveCartItems(updatedItems)

        }
    }

    // üî• X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    suspend fun clearCartItems(cartItemsToRemove: List<CartItem>) {
        try {
            val currentItems = getCartItems().firstOrNull() ?: emptyList()

            if (cartItemsToRemove.isEmpty()) return

            val updatedItems = currentItems.filterNot { item ->
                cartItemsToRemove.any { it.id == item.id }
            }

            dataStore.edit { preferences ->
                if (updatedItems.isEmpty()) {

                    preferences.remove(Keys.CART_ITEMS)
                } else {

                    val json = Json.encodeToString(updatedItems)
                    preferences[Keys.CART_ITEMS] = json
                }
            }

            updateCheckoutDetails(updatedItems)

        } catch (e: Exception) {
            Log.e("CartRepository", "L·ªói khi x√≥a s·∫£n ph·∫©m trong gi·ªè h√†ng: ${e.localizedMessage}")
        }
    }


    // üî• X√≥a to√†n b·ªô gi·ªè h√†ng
    suspend fun clearCart() {
        saveCartItems(emptyList()) // G·ªçi h√†m l∆∞u v·ªõi danh s√°ch r·ªóng
    }

    // L·∫•y chi ti·∫øt thanh to√°n t·ª´ DataStore
    fun getCheckoutDetails(): Flow<CheckoutDetails> {
        return dataStore.data.map { preferences ->
            CheckoutDetails(
                subTotal = preferences[PreferencesKeys.KEY_SUBTOTAL] ?: 0f,
                tax = preferences[PreferencesKeys.KEY_TAX] ?: 0f,
                deliveryFee = preferences[PreferencesKeys.KEY_DELIVERY_FEE] ?: 0f,
                totalAmount = preferences[PreferencesKeys.KEY_TOTAL_AMOUNT] ?: 0f
            )
        }
    }

    // L∆∞u chi ti·∫øt thanh to√°n v√†o DataStore
    private suspend fun saveCheckoutDetails(checkoutDetails: CheckoutDetails) {
        try {
            dataStore.edit {
                it[PreferencesKeys.KEY_SUBTOTAL] = checkoutDetails.subTotal
                it[PreferencesKeys.KEY_TAX] = checkoutDetails.tax
                it[PreferencesKeys.KEY_DELIVERY_FEE] = checkoutDetails.deliveryFee
                it[PreferencesKeys.KEY_TOTAL_AMOUNT] = checkoutDetails.totalAmount
            }
        } catch (e: Exception) {
            Log.e("CartRepository", "L·ªói khi l∆∞u chi ti·∫øt thanh to√°n: ${e.localizedMessage}")
        }
    }

    // C·∫≠p nh·∫≠t l·∫°i chi ti·∫øt thanh to√°n d·ª±a tr√™n gi·ªè h√†ng hi·ªán t·∫°i
    private suspend fun updateCheckoutDetails(cartItems: List<CartItem>) {
        val subTotal = cartItems.sumOf { it.quantity * it.menuItemId.price.toDouble() }.toFloat()
        val tax = subTotal * 0.1f // Gi·∫£ s·ª≠ thu·∫ø l√† 10%
        val deliveryFee = if (subTotal >= 500000f) 0f else 15000f
        val totalAmount = subTotal + tax + deliveryFee

        saveCheckoutDetails(CheckoutDetails(subTotal = subTotal, tax = tax, deliveryFee = deliveryFee, totalAmount = totalAmount))
    }
}